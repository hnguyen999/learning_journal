1. Concatenation with a variable shortcut/best practice in JavaScript: back-picks `${var} `

console.log(`${firstName} ${lastName}`);
RETURNS: Dylan Israel
" " is the same as ' '

We can also store them in variables and create a new variable fullName = firstName + " " + lastName

2. Wokiness in Javascript (defying OOC):

let example1 = parseInt("Hello 33 World 22");
let example2 = parseFloat('44 Dylan 33');
let example3 = 55.3333.toFixed(0);
let example4 = 200.0.toFixed(2);

console.log(); null   ---> number
console.log(); 44   ---> number
console.log(); 55   ---> string (added on toFixed turned number into string, weird)
console.log(); 200.00 ---> string (weird)


3. Falsey vs Truthy in Javascript:
let example1 = false;
let example2 = true;
let example3 = null;
let example4 = undefined;
let example5 = '';
let example6 = NaN;
let example7 = -5;
let example8 = 0;

// console.log(Boolean(example1)); falsey
// console.log(Boolean(example2)); truthy
// console.log(Boolean(example3)); falsey (developer plans to put a value into Null later on)
// console.log(Boolean(example4)); falsey
// console.log(Boolean(example5)); falsey (emptry strings are false) space is truthy
// console.log(Boolean(example6)); falsey (Not a Number when you're trying to parse a string)
// console.log(Boolean(example7)); truthy 
// console.log(Boolean(example8)); falsey (WEIRD WONK IN JAVASCRIPT!)


4. Arrays:

let example1=[5,7,6];

console.log(example1[0])
RETURNS: "5"


5. let example1=[5,7,6];
example1.push(8, 9, 10);
example1.pop();

example1[0] = 1;

example1.forEach((element) => {
    console.log(element)
});

RETURNS:
>1
›7
›6
›8
›9
›[1, 7, 6, 8, 9]


6. Objects in JAVASCRIPT:

let user = {
  firstName: "Hang",
  lastName: "Nguyen",
  address: { 
      city: "Philadelphia", 
      state: "PA" },
    hobbies: ["sleep", "eat", "pray"],
    goldMember: true
};

console.log(Object.values(user))

RETURNS: ["Hang", "Nguyen", {city: "Philadelphia", state: "PA"}, ["sleep", "eat", "pray"], true]

7. Modula % operator returns the remainder ======= same as Ruby

8 Arithmetic Challenge:
let price1 = 3;
let price2 = 5;
let price3 = 7;

const priceTotal = price1 + price2 + (price3 * 2);

const averagePrice = priceTotal / 4

const finalPrice = priceTotal - 5

console.log(`Your final price is ${priceTotal}`)

RETURNS: Your final price is 22

8. Equal vs STRICTLY Equal
== checks the value equal
=== checks the TYPE + Value equal

10 == 10---> true
10 == '10' ---> true ; same value same type
10 === '10' ----> false; same value different type

9. Increments & Decrements:

const customerAnswer = Math.random() >= 0.5;
let quantity = 2;

if(customerAnswer) {
    quantity+=5
    //quantity + 5; quantity++ is +1
}
    
console.log(quantity);
RETURNS: (50/50 chance): 2 or 7

10. if, else if, else

let example = 5;

if (example === 6 || false === true) {
    console.log('Runs');
} else if ( false ) {
    console.log('else if')
} else {
    console.log('else')
}

11. Switch Case Statements 
Check each Case similar to an If Statement (Break in between each case check):

let studentAnswer = 'D';

switch(studentAnswer) {
    case 'A':
        console.log('A is wrong');
        break;
    case 'B':
        console.log('B is wrong');
        break;
    case 'C':
        console.log('C is correct.');
        break;
    default:
        console.log('Not a real answer.')
}

RETURNS: Not a real answer

12. Loops:

let total = 0;

for (let i = 0; i < 5; i++) {
    console.log(i);
}

RETURNS:
0
1
2
3
4

let total = 0;

for (let i = 0; i < 5; i++) {
    total += i;
}

console.log(total);

RETURNS:
10


let total = 0;

let numArray = [10, 20, 30, 40, 50, 60, 70, 80];

for (let i = 0; i < numArray.length; i++) {
    
    total += numArray[i];
}

console.log(total);


let total = 0;

let numArray = [10, 20, 30, 40, 50, 60, 70, 80];

for (let i = 0; i < numArray.length; i++) {
    console.log(numArray[i])
    total += numArray[i];
}

RETURNS:
›10
›20
›30
›40
›50
›60
›70
›80

>360


*LOOP CHALLENGE - MY SOLUTION*

const cartItems = [
    { quantity: 1, price: 5 },
    { quantity: 3, price: 4 },
    { quantity: 10, price: 1}
];

let total = 0;

for (let x = 0; x < cartItems.length; x++) {
    total += cartItems[x].quantity * cartItems[x].price;
}

console.log(total) 

let totalTaxed = total * 1.08

console.log(totalTaxed)

RETURNS:
›27
›29.160000000000004

*LOOP CHALLENGE - A BETTER SOLUTION*

let total = 0

for(const cartItem of cartItems) {
    total += cartItem.price * cartItem.quantity;
}

total *= 1.08

console.log(total)


13. While vs. Do While loops:

let count = 0;

while (true) {
    count++;
    
    if(count >= 20) {
        break;
    }
}

console.log(count);

RETURNS: 20

let count = 0;

do {
    count++;
    
    if(count >= 20) {
        break;
    }
}
while (false)

console.log(count);

RETURNS: 1
It basically did the Do 1 time, then checks the while and since it failed as a "false", stopped.


14. Functions:

function add(num1, num2) {
    return num1 + num2;
}

console.log(add(10, 6));

RETURNS: 16
