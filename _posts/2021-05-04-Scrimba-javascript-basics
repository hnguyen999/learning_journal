1. Concatenation shortcut/best practice in JavaScript: back-picks `${var} `

console.log(`${firstName} ${lastName}`);
RETURNS: Dylan Israel

We can also store them in variables and create a new variable fullName = firstName + " " + lastName

2. Wokiness in Javascript (defying OOC):

let example1 = parseInt("Hello 33 World 22");
let example2 = parseFloat('44 Dylan 33');
let example3 = 55.3333.toFixed(0);
let example4 = 200.0.toFixed(2);

console.log(); null   ---> number
console.log(); 44   ---> number
console.log(); 55   ---> string (added on toFixed turned number into string, weird)
console.log(); 200.00 ---> string (weird)


3. Falsey vs Truthy in Javascript:
let example1 = false;
let example2 = true;
let example3 = null;
let example4 = undefined;
let example5 = '';
let example6 = NaN;
let example7 = -5;
let example8 = 0;

// console.log(Boolean(example1)); falsey
// console.log(Boolean(example2)); truthy
// console.log(Boolean(example3)); falsey (developer plans to put a value into Null later on)
// console.log(Boolean(example4)); falsey
// console.log(Boolean(example5)); falsey (emptry strings are false) space is truthy
// console.log(Boolean(example6)); falsey (Not a Number when you're trying to parse a string)
// console.log(Boolean(example7)); truthy 
// console.log(Boolean(example8)); falsey (WEIRD WONK IN JAVASCRIPT!)


4. Arrays:

let example1=[5,7,6];

console.log(example1[0])
RETURNS: "5"


5. let example1=[5,7,6];
example1.push(8, 9, 10);
example1.pop();

example1[0] = 1;

example1.forEach((element) => {
    console.log(element)
});

RETURNS:
>1
›7
›6
›8
›9
›[1, 7, 6, 8, 9]


6. Objects in JAVASCRIPT:

let example1 = {
    firstName: 'Dylan',
    lastName: 'Israel',
    address: {
        city: 'Austin',
        state: 'Texas'
    },
    age: 30,
    cats: ['Milo', 'Tito', 'Achieles']
};

example1.age = 31;

console.log(Object.values(example1));
